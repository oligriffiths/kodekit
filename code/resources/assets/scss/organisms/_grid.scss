$grid-itemWidth: 140px !default;
$grid-spacing: 16px !default;
$grid-width: 2560px !default;

@mixin setGridItemWidth($breakpoint,$columns) {
  @media (min-width: $breakpoint ) {
    width: percentage(1/$columns);
    @content;
  }
}

// Calculate the grid items
@mixin setGridBreakpoint($width: $grid-itemWidth, $spacing: $grid-spacing, $gridwidth: $grid-width) {

  // Calculating max number
  $number: floor($gridwidth / $width);

  // From 2 to 20 columns
  @for $i from 2 through $number {

    // Calculating breakpoint
    $prev-breakpoint-width: (($i - 1) * $width) + ($i * $spacing);
    $breakpoint-width: ($i * $width) + (($i + 1) * $spacing);
    $columns: $i;
    $breakpoint: $breakpoint-width;

    // Setting separate breakpoint for $desktop width
    @if ( $breakpoint-width > $desktop and $prev-breakpoint-width < $desktop ) {
      $breakpoint: $desktop;
      $columns: floor(($desktop - $sidebar-width-small - $spacing) / ($width + $spacing));
      @include setGridItemWidth($breakpoint,$columns);
    }

    // All breakpoints above $desktop
    @if ( $breakpoint-width > $desktop and $breakpoint-width < $delta ) {
      $columns: floor(($breakpoint-width - $sidebar-width-small - $spacing) / ($width + $spacing));
      $breakpoint: $sidebar-width-small + (($columns * $width) + (($columns + 1) * $spacing));
      @if ( $breakpoint < $desktop ) {
        $breakpoint: $breakpoint + ($width + $spacing);
      }
    }

    // Setting separate breakpoint for $delta width
    @if ( $breakpoint-width > $delta and $prev-breakpoint-width < $delta ) {
      $breakpoint: $delta;
      $columns: floor(($delta - $sidebar-width - $spacing) / ($width + $spacing));
      @include setGridItemWidth($breakpoint,$columns);
    }

    // All breakpoints above $delta
    @if ( $breakpoint-width > $delta ) {
      $columns: floor(($breakpoint-width - $sidebar-width - $spacing) / ($width + $spacing));
      $breakpoint: $sidebar-width + (($columns * $width) + (($columns + 1) * $spacing));
      @if ( $breakpoint < $delta ) {
        $breakpoint: $breakpoint + ($width + $spacing);
      }
    }

    // Setting breakpoints
    @include setGridItemWidth($breakpoint,$columns);
  }
}

.k-grid-container {
  @include flexbox {
    flex: 1 1 auto;
  }
}

.k-grid {
  background: $table-background;
  @include border(bottom, $table-header-border);
  padding: $grid-spacing / 2;
}

.k-grid__items {
  @include clearfix;
}

.k-grid__item {
  float: left;
  padding: $grid-spacing / 2;
  width: 100%;

  // Set breakpoints
  @include setGridBreakpoint;
}

.k-grid__item__title {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.k-grid__item--folder {
  cursor: pointer;

  .k-grid__item__title {
    padding: 10px;
    border: 1px solid #ddd;
    background: colorpicker(primary, 5);
    @include transition;

    @include icon-before(k-folder,true) {
      padding-right: 5px;
    }
  }

  &:hover,
  &:focus {
    .k-grid__item__title {
      background: colorpicker(primary, 3);
    }
  }
}

.k-grid__item--file {
  cursor: pointer;

  .k-grid__item__content {
    @include ratio-block(4 to 3);
    background: colorpicker(primary, 6);
    border: 1px solid #ddd;
    padding: 1px;
    @include transition;
  }

  .k-grid__file-wrapper {
    @include coverall(1px);
    text-align: center;
    font-size: 0;

    &:before {
      content: '';
      display: inline-block;
      height: 100%;
      vertical-align: middle;
    }
  }

  .k-grid__file {
    display: inline-block;
    vertical-align: middle;
    font-size: 14px;
    color: $color-accent;

    img {
      display: inline-block;
      vertical-align: middle;
      max-width: 100%;
    }
  }

  .k-grid__item__title {
    padding: 10px;
    @include transition;
  }

  &:focus,
  &:hover {
    .k-grid__item__title {
      background: colorpicker(primary, 4);
    }
  }
}